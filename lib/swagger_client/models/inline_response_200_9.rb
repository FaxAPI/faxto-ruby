=begin
#Fax.to REST API client for Ruby

#This is Fax.to REST API client for Ruby.

OpenAPI spec version: 2.0.0
Contact: inquiries@fax.to
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module SwaggerClient
  class InlineResponse2009
    attr_accessor :status

    attr_accessor :user_id

    attr_accessor :created_date

    attr_accessor :id

    attr_accessor :filename

    attr_accessor :orig_filename

    attr_accessor :preview_file

    attr_accessor :preview_image

    attr_accessor :preview_in_storage

    attr_accessor :file_extension

    attr_accessor :filename_uploaded

    attr_accessor :filesize

    attr_accessor :s3

    attr_accessor :server_document_id

    attr_accessor :team_user_id

    attr_accessor :total_pages

    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'user_id' => :'user_id',
        :'created_date' => :'created_date',
        :'id' => :'id',
        :'filename' => :'filename',
        :'orig_filename' => :'orig_filename',
        :'preview_file' => :'preview_file',
        :'preview_image' => :'preview_image',
        :'preview_in_storage' => :'preview_in_storage',
        :'file_extension' => :'file_extension',
        :'filename_uploaded' => :'filename_uploaded',
        :'filesize' => :'filesize',
        :'s3' => :'s3',
        :'server_document_id' => :'server_document_id',
        :'team_user_id' => :'team_user_id',
        :'total_pages' => :'total_pages',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'status' => :'String',
        :'user_id' => :'Integer',
        :'created_date' => :'DateTime',
        :'id' => :'Integer',
        :'filename' => :'String',
        :'orig_filename' => :'String',
        :'preview_file' => :'String',
        :'preview_image' => :'String',
        :'preview_in_storage' => :'Integer',
        :'file_extension' => :'String',
        :'filename_uploaded' => :'String',
        :'filesize' => :'String',
        :'s3' => :'Integer',
        :'server_document_id' => :'Integer',
        :'team_user_id' => :'Integer',
        :'total_pages' => :'Integer',
        :'updated_at' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'created_date')
        self.created_date = attributes[:'created_date']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.has_key?(:'orig_filename')
        self.orig_filename = attributes[:'orig_filename']
      end

      if attributes.has_key?(:'preview_file')
        self.preview_file = attributes[:'preview_file']
      end

      if attributes.has_key?(:'preview_image')
        self.preview_image = attributes[:'preview_image']
      end

      if attributes.has_key?(:'preview_in_storage')
        self.preview_in_storage = attributes[:'preview_in_storage']
      end

      if attributes.has_key?(:'file_extension')
        self.file_extension = attributes[:'file_extension']
      end

      if attributes.has_key?(:'filename_uploaded')
        self.filename_uploaded = attributes[:'filename_uploaded']
      end

      if attributes.has_key?(:'filesize')
        self.filesize = attributes[:'filesize']
      end

      if attributes.has_key?(:'s3')
        self.s3 = attributes[:'s3']
      end

      if attributes.has_key?(:'server_document_id')
        self.server_document_id = attributes[:'server_document_id']
      end

      if attributes.has_key?(:'team_user_id')
        self.team_user_id = attributes[:'team_user_id']
      end

      if attributes.has_key?(:'total_pages')
        self.total_pages = attributes[:'total_pages']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          user_id == o.user_id &&
          created_date == o.created_date &&
          id == o.id &&
          filename == o.filename &&
          orig_filename == o.orig_filename &&
          preview_file == o.preview_file &&
          preview_image == o.preview_image &&
          preview_in_storage == o.preview_in_storage &&
          file_extension == o.file_extension &&
          filename_uploaded == o.filename_uploaded &&
          filesize == o.filesize &&
          s3 == o.s3 &&
          server_document_id == o.server_document_id &&
          team_user_id == o.team_user_id &&
          total_pages == o.total_pages &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [status, user_id, created_date, id, filename, orig_filename, preview_file, preview_image, preview_in_storage, file_extension, filename_uploaded, filesize, s3, server_document_id, team_user_id, total_pages, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
